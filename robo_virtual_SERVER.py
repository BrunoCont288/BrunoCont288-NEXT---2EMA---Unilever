# Nome do Arquivo: robo_virtual_SERVER.py
# Fun√ß√£o: Simula o controlador de um rob√¥ G-code. Ele espera por comandos
#         em uma porta de rede e responde "ok" para cada um.
#         DEVE SER INICIADO ANTES DO SCRIPT DE CONTROLE.

import socket
import time

# Configura√ß√µes do nosso servidor de simula√ß√£o
HOST = 'localhost'  # Endere√ßo local (este computador)
PORT = 12345        # Um n√∫mero de porta para a comunica√ß√£o

print("--- [SIMULADOR] Rob√¥ Virtual ---")

# Cria o servidor de socket que ficar√° ouvindo por conex√µes
# O 'with' garante que o servidor seja fechado corretamente no final
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
    # Esta op√ß√£o permite que o endere√ßo seja reutilizado rapidamente, evitando erros de "endere√ßo j√° em uso"
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    server.bind((HOST, PORT))
    server.listen()
    print(f"ü§ñ [SIMULADOR] Rob√¥ Virtual Online. Aguardando conex√£o do C√©rebro em {HOST}:{PORT}...")

    # Pausa o programa e espera at√© que o script do c√©rebro se conecte
    conn, addr = server.accept()
    with conn:
        print(f"‚úÖ [SIMULADOR] C√©rebro conectado a partir de {addr}")
        
        # Envia uma mensagem de boas-vindas, imitando um firmware real
        conn.sendall(b'Marlin 1.0.2 - Virtual Robot Ready\n')
        
        # Loop principal para receber comandos
        while True:
            try:
                # Espera por um comando (at√© 1024 bytes)
                data = conn.recv(1024)
                if not data:
                    # Se o c√©rebro desconectar (enviar dados vazios), sai do loop
                    break 
                
                comando_recebido = data.decode('utf-8').strip()
                print(f"‚û°Ô∏è  [SIMULADOR] Comando recebido: '{comando_recebido}'")

                # Envia a confirma√ß√£o "ok" de volta para o c√©rebro
                conn.sendall(b'ok\n')

            except ConnectionResetError:
                # Isso acontece se o programa principal fechar a conex√£o abruptamente
                print("‚ö†Ô∏è [SIMULADOR] A conex√£o foi for√ßadamente fechada pelo c√©rebro.")
                break

        print("üîå [SIMULADOR] C√©rebro desconectou.")

print("[SIMULADOR] Rob√¥ Virtual Desligado.")